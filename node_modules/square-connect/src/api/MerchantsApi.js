/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 */
var ApiClient = require('../ApiClient');
var RetrieveMerchantResponse = require('../model/RetrieveMerchantResponse');

/**
 * Merchants service.
 * @module api/MerchantsApi
 */

/**
 * Constructs a new MerchantsApi. 
 * @alias module:api/MerchantsApi
 * @class
 * @param {module:ApiClient} apiClient Optional API client implementation to use,
 * default to {@link module:ApiClient#instance} if unspecified.
 */
module.exports = function(apiClient) {
  this.apiClient = apiClient || ApiClient.instance;



  /**
   * RetrieveMerchant
   * Retrieve a &#x60;Merchant&#x60; object for the given &#x60;merchant_id&#x60;.
   * @param {String} merchantId The ID of the merchant to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RetrieveMerchantResponse} and HTTP response
   */
  this.retrieveMerchantWithHttpInfo = function(merchantId) {
    var postBody = null;

    // verify the required parameter 'merchantId' is set
    if (merchantId === undefined || merchantId === null) {
      throw new Error("Missing the required parameter 'merchantId' when calling retrieveMerchant");
    }


    var pathParams = {
      'merchant_id': merchantId
    };
    var queryParams = {
    };
    var headerParams = {
    };
    headerParams['Square-Version'] = '2019-09-25';

    var formParams = {
    };

    var authNames = ['oauth2'];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = RetrieveMerchantResponse;

    return this.apiClient.callApi(
      '/v2/merchants/{merchant_id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType
    );
  }

  /**
   * RetrieveMerchant
   * Retrieve a &#x60;Merchant&#x60; object for the given &#x60;merchant_id&#x60;.
   * @param {String} merchantId The ID of the merchant to retrieve
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RetrieveMerchantResponse}
   */
  this.retrieveMerchant = function(merchantId) {
    return this.retrieveMerchantWithHttpInfo(merchantId)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }
};
